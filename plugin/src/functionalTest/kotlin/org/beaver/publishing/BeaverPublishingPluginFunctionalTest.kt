/*
 * This source file was generated by the Gradle 'init' task
 */
package org.beaver.publishing

import java.io.File
import kotlin.test.assertTrue
import kotlin.test.Test
import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.io.TempDir

/**
 * This class was created to test the BeaverPublishingPlugin.
 */
class BeaverPublishingPluginFunctionalTest {

    @field:TempDir
    lateinit var projectDir: File

    private val buildFile by lazy { projectDir.resolve("build.gradle") }
    private val settingsFile by lazy { projectDir.resolve("settings.gradle") }

    @Test
    fun `can run task`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText(
            """
            plugins {
                id('beaver.publishing')
            }
            
            publishing {
                publications {
                    nebula(MavenPublication) {
                        groupId = 'com.example'
                        artifactId = 'my-artifact'
                        version = '1.0.0'
                    }
                }
            }
        """.trimIndent()
        )

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("publishNebulaPublicationToMavenLocal")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify the result
        assertTrue(result.output.contains("BUILD SUCCESSFUL"))
    }

    @Test
    fun `task fails when groupId is not set`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText(
            """
        plugins {
            id('beaver.publishing')
        }

        publishing {
            publications {
                nebula(MavenPublication) {
                    artifactId = 'my-artifact'
                    version = '1.0.0'
                }
            }
        }
    """.trimIndent()
        )

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("publishNebulaPublicationToMavenLocal")
        runner.withProjectDir(projectDir)
        val result = runner.buildAndFail()

        // Verify the result
        assertTrue(result.output.contains("Invalid publication 'nebula': groupId cannot be empty."))
    }
}
